###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

## This pulls in the variables file from the networking role
## This is used in the last play to verify the DPU is back online

- name: Role - bmc_board_type
  import_role:
    name: bmc_board_type

- name: Set board type from imported role
  ansible.builtin.set_fact:
    boardtype: "{{ board.stdout.split(' ')[1] }}"

## Development Board workflow

- name: Development BMC Board
  block:
    - name: Board Type Annoucement
      debug:
        msg: 'Install on a Development BMC Board commencing'

    # The development BFB and URL variables are stored in the vars/main.yaml file within this role
    - name: Checking if BFB has been downloaded
      stat:
        path: '/tmp/{{ dev_doca_bfb }}'
      register: bfbdownload
      delegate_to: localhost

    - name: Download bfb from the Internet
      get_url:
        url: '{{ dev_bfb_download_url }}'
        dest: '/tmp'
      delegate_to: localhost
      when: not bfbdownload.stat.exists

    - name: Checking if Dev BFB has been created
      stat:
        path: '/tmp/dev.bfb'
      register: devbfbbuilt
      delegate_to: localhost

    - name: Building the Dev BFB
      block:
        - name: Role - build_bfb_cfg
          import_role:
            name: build_bfb_cfg
          delegate_to: localhost

        - name: Add bf.cfg to BFB file
          shell: cat /tmp/{{ dev_doca_bfb }} /tmp/bf.cfg  > /tmp/dev.bfb
          delegate_to: localhost
      when: not devbfbbuilt.stat.exists

    - name: Set DOCA bfb file
      ansible.builtin.set_fact:
        dev_doca_bfb: dev.bfb

    - name: Stop rshim on the BMC 1/2
      ansible.builtin.raw: /bin/bash -c "systemctl stop rshim"

    - name: Start rshim on the BMC 2/2
      ansible.builtin.raw: /bin/bash -c "systemctl start rshim"

    - name: Pause 10 seconds
      pause:
        seconds: 10

    # This process takes over 20 mins
    # - name: SCP BFB to BMC Rshim
    #   command: 'sshpass -p "{{ ansible_password }}" scp -oStrictHostKeyChecking=no /tmp/{{ dev_doca_bfb }} {{ ansible_user }}@{{ ansible_host }}:/dev/rshim0/boot'
    #   register: scptobmc
    #   delegate_to: localhost
    #   failed_when: "'truncate' not in scptobmc.stderr"

    - name: Pause for 10 minutes - DPU OS Install
      pause:
        minutes: 10

    - name: Wait for up to 10 minutes for SSH on the BMC
      ansible.builtin.wait_for:
        port: 22
        host: '{{ ansible_host }}'
        delay: 10
      register: verifybmc
      until: '"started" in verifybmc.state'
      retries: 20
      delay: 30
      delegate_to: localhost

    - name: Debug var
      debug:
        msg: '{{ verifybmc }}'

    - name: Remove bf.cfg file
      file:
        path: /tmp/bf.cfg
        state: absent
      delegate_to: localhost

    - name: Pause for 2 minutes - DPU needs to catch its breath
      pause:
        minutes: 2

    - meta: end_play

  when: boardtype == '0x44'

## Production Board workflow

- name: Production BMC Board
  block:
    - name: Board Type Annoucement
      debug:
        msg: 'Install on a Production BMC Board commencing'

    # The development BFB and URL are stored in the group_vars/all.yaml file
    - name: Checking if BFB has been downloaded
      stat:
        path: '/tmp/{{ doca_bfb }}'
      register: bfbdownload
      delegate_to: localhost

    - name: Download bfb from the Internet
      get_url:
        url: '{{ bfb_download_url }}'
        dest: '/tmp'
      delegate_to: localhost
      when: not bfbdownload.stat.exists

    - name: Checking if New BFB has been created
      stat:
        path: '/tmp/new.bfb'
      register: newbfbbuilt
      delegate_to: localhost

    - name: Building the Prod BFB
      block:
        - name: Role - build_bfb_cfg
          import_role:
            name: build_bfb_cfg
          delegate_to: localhost

        - name: Add bf.cfg to BFB file
          shell: cat /tmp/{{ doca_bfb }} /tmp/bf.cfg  > /tmp/new.bfb
          delegate_to: localhost
      when: not newbfbbuilt.stat.exists

    - name: Set DOCA bfb file
      ansible.builtin.set_fact:
        dev_doca_bfb: new.bfb

    - name: Stop rshim on the BMC 1/2
      ansible.builtin.raw: /bin/bash -c "systemctl stop rshim"

    - name: Start rshim on the BMC 2/2
      ansible.builtin.raw: /bin/bash -c "systemctl start rshim"

    - name: Pause 10 seconds
      pause:
        seconds: 10

    # This process takes over 20 mins
    - name: SCP BFB to BMC Rshim
      command: 'sshpass -p "{{ ansible_password }}" scp -oStrictHostKeyChecking=no /tmp/{{ dev_doca_bfb }} {{ ansible_user }}@{{ ansible_host }}:/dev/rshim0/boot'
      register: scptobmc
      delegate_to: localhost
      failed_when: "'truncate' not in scptobmc.stderr"

    - name: Pause for 10 minutes - DPU OS Install
      pause:
        minutes: 10

    - name: Wait for up to 10 minutes for SSH on the BMC
      ansible.builtin.wait_for:
        port: 22
        host: '{{ ansible_host }}'
        delay: 10
      register: verifybmc
      until: '"started" in verifybmc.state'
      retries: 20
      delay: 30
      delegate_to: localhost

    - name: Remove bf.cfg file
      file:
        path: /tmp/bf.cfg
        state: absent
      delegate_to: localhost

    - name: Pause for 2 minutes - DPU needs to catch its breath
      pause:
        minutes: 2

    - meta: end_play

  when: boardtype == '0x40'
