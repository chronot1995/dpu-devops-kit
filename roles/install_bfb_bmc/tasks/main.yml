###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

## This pulls in the variables file from the networking role
## This is used in the last play to verify the DPU is back online

- name: Role - bmc_board_type
  import_role:
    name: bmc_board_type

- name: Output of boardtype
  debug:
    msg: "{{ board.stdout.split(' ')[1] }}"

- name: Set board
  ansible.builtin.set_fact:
    boardtype: "{{ board.stdout.split(' ')[1] }}"

- name: Output of boarded
  debug:
    msg: '{{ boardtype }}'

- name: Yeet
  debug:
    msg: 'Yeet!'
  when: boardtype== '0x44'

- name: Stop here
  ansible.builtin.fail:
    msg: Stop here - debug

- name: Checking if BFB has been downloaded
  stat:
    path: '/tmp/{{ doca_bfb }}'
  register: bfbdownload
  delegate_to: localhost

- name: Download bfb from the Internet
  get_url:
    url: '{{ bfb_download_url }}'
    dest: '/tmp'
  delegate_to: localhost
  when: not bfbdownload.stat.exists

- name: Role - build_bfb_cfg
  import_role:
    name: build_bfb_cfg
  delegate_to: localhost

- name: Add bf.cfg to BFB file
  shell: cat /tmp/{{ doca_bfb }} /tmp/bf.cfg  > /tmp/new.bfb
  delegate_to: localhost

- name: Set DOCA bfb file
  ansible.builtin.set_fact:
    doca_bfb: new.bfb

- name: Stop rshim on the BMC 1/2
  ansible.builtin.raw: /bin/bash -c "systemctl stop rshim"

- name: Start rshim on the BMC 2/2
  ansible.builtin.raw: /bin/bash -c "systemctl start rshim"

# - name: Pause 10 seconds for testing
#   pause:
#     seconds: 10

# This process takes over 20 mins
- name: SCP BFB to BMC Rshim
  command: 'sshpass -p "{{ ansible_password }}" scp -oStrictHostKeyChecking=no /tmp/{{ doca_bfb }} {{ ansible_user }}@{{ ansible_host }}:/dev/rshim0/boot'
  register: scptobmc
  delegate_to: localhost
  failed_when: "'truncate' not in scptobmc.stderr"

- name: Pause for 10 minutes - DPU OS Install
  pause:
    minutes: 10

- name: Wait for up to 10 minutes for SSH on the BMC
  ansible.builtin.wait_for:
    port: 22
    host: '{{ ansible_host }}'
    delay: 10
  register: verifybmc
  until: '"started" in verifybmc.state'
  retries: 20
  delay: 30
  delegate_to: localhost

- name: Remove bf.cfg file
  file:
    path: /tmp/bf.cfg
    state: absent
  delegate_to: localhost

- name: Pause for 2 minutes - DPU needs to catch its breath
  pause:
    minutes: 2
