###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################
#
# This role creates a single SF on the DPU based on the pfnum
# pfnum must be set as a fact somewhere before invocation or must be set in role vars

# pfnum var must be set or passed in

### Create
### Configure
### Deploy

- name: init variables
  set_fact:
    sf_exists: false
    sf_index: ""
    pci_id: ""
    aux_interfaces: []
    aux_interfaces_dict: {}
    sf_active_detached: false
    physical_interface: ""
    rep_netdev: []

- name: Check the pfnum variable
  fail:
    msg: pfnum is not defined. Pass in as role param or set in role vars
  when: pfnum is undefined

- name: Check the physical interface (pfnum) exists
  fail:
    msg: "Something wrong with physical interface p{{ pfnum }} not found on the dpu"
  when: hostvars[inventory_hostname]['ansible_p' + pfnum].device is undefined

- name: Check the sf_num variables
  fail:
    msg: sf_num variable not set. Pass into tasks or set in role vars file
  when: sf_num is undefined

### Create
# Convenience var. Set to 0 or 1 corresponding to the PF number from the host interface
#- name: set pfnum fact
#  set_fact:
#    pfnum: "{{ host_interface | regex_replace('^p.([0-1]).*', '\\1') | int }}"

# Need to find the pci device (0000:03:00.[0-1]) from the pfnum
# this is used to create SFs from same PCI device. Keeping everything on the same pci/pf device.
- name: set pci device fact
  set_fact:
    pci_id: "{{ hostvars[inventory_hostname]['ansible_' + item].pciid }}"
  when:
    - hostvars[inventory_hostname]['ansible_' + item].module is defined
    - hostvars[inventory_hostname]['ansible_' + item].module == "mlx5_core"
    - hostvars[inventory_hostname]['ansible_' + item].device == 'p' + pfnum
  with_items: "{{ ansible_interfaces }}"

# quick and dirty way of doing the above
#- name: set pci device fact
#  set_fact:
#    pci_id: "0000:03:00.{{ pfnum }}"


# Collect port show in json format register as variable
- name: Checking if SFs are created
  command: /opt/mellanox/iproute2/sbin/mlxdevm port show -j
  register: sf_check_output

# detect if pfnum + sf num is already configured
- name: Detecting if SF already exists
  set_fact:
    sf_exists: true
  when:
    - item["value"].sfnum == sf_num
    - item["value"].pfnum == (hostvars[inventory_hostname]["pfnum"] | int)
  with_items: "{{ ((sf_check_output.stdout|from_json).port|dict2items) }}"

# if sf doesnt exist, create it
- name: Create SF
  command: /opt/mellanox/iproute2/sbin/mlxdevm port add pci/{{ pci_id }} flavour pcisf pfnum {{ pfnum }} sfnum {{ sf_num }} -j
  when: not sf_exists

#####
### Configure
#####
# Scrape port info again - SF should exist here now
- name: Recollect port states
  command: /opt/mellanox/iproute2/sbin/mlxdevm port show -j
  register: sf_check_output

# get sf index
- name: SF - Get SF sf index
  set_fact:
    sf_index: "{{ item['key'] }}"
  when:
    - item["value"].sfnum == sf_num
    - item["value"].pfnum == (hostvars[inventory_hostname]["pfnum"] | int)
  with_items: "{{ ((sf_check_output.stdout|from_json).port|dict2items) }}"

# if sf is inactive and detached, configure it
- name: Configure SF
  command: /opt/mellanox/iproute2/sbin/mlxdevm port function set {{ sf_index }} hw_addr {{ '44:38:39' | random_mac }} trust on state active
  when:
    - item["value"]["function"].state == "inactive"
    - item["value"]["function"].opstate == "detached"
    - item["key"] == sf_index
  with_items: "{{ ((sf_check_output.stdout|from_json).port|dict2items) }}"

#####
### Deploy
#####
## Need to unbind from config driver and bind to mlx5_core driver
## but only if the opstate is detached and state is active
#
# Scrape port info again - SF should exist and be "active" now
- name: Recollect port states
  command: /opt/mellanox/iproute2/sbin/mlxdevm port show -j
  register: sf_check_output

# Need to find aux devices from the SFs. Only checking the relevant pci device
- name: Discover all aux devices
  find:
    paths: /sys/devices/pci0000:00/0000:00:00.0/0000:01:00.0/0000:02:00.0/{{ pci_id }}
    pattern: mlx5_core.sf.*
    file_type: directory
  register: aux_files

# Build a list of all of the aux devices
- name: Build list of aux devices
  set_fact:
    aux_interfaces: "{{ aux_interfaces|default([]) + [item.path|basename]  }}"
  with_items: "{{ aux_files['files'] }}"

# Now need to check each aux devices sf number
- name: Collecting SF numbers for aux devices
  command: cat /sys/bus/auxiliary/devices/{{ item }}/sfnum
  with_items: "{{ aux_interfaces }}"
  register: aux_sf_output

# create a dict of only our SFs that maps aux interface to SF number
- name: Mapping Aux device to SF
  set_fact:
    aux_interfaces_dict: "{{ aux_interfaces_dict|default({}) | combine({item.item: item.stdout})  }}"
  when: item.stdout|int == sf_num
  with_items: "{{ aux_sf_output['results'] }}"

# if sf is active and detached, its ok to unbind/bind. Set fact
- name: Configure SF
  set_fact:
    sf_active_detached: true
  when:
    - item["value"]["function"].state == "active"
    - item["value"]["function"].opstate == "detached"
    - item["key"] == sf_index
  with_items: "{{ ((sf_check_output.stdout|from_json).port|dict2items) }}"

# unbind from config driver and bind to real driver
- name: Unbind from config driver
  shell: "echo {{ item['key'] }} > /sys/bus/auxiliary/drivers/mlx5_core.sf_cfg/unbind"
  when: item["value"]|int == sf_num and sf_active_detached
  failed_when: false
  with_items: "{{ aux_interfaces_dict|dict2items }}"

- name: Bind to real driver
  shell: "echo {{ item['key'] }} > /sys/bus/auxiliary/drivers/mlx5_core.sf/bind"
  when: item["value"]|int == sf_num and sf_active_detached 
  with_items: "{{ aux_interfaces_dict|dict2items }}"

##### End SF creation/config #####

