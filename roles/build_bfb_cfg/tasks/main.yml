###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

## This pulls in the variables file from the networking role
## This is used in the last play to verify the DPU is back online

# Future development work for OOB

# - name: Build OOB Static IP Netplan file from the template
#   template:
#     src: network-config.j2
#     dest: /tmp/network-config
#     mode: 0755

- name: Compute DPU's rshim mac
  set_fact:
    dpu_rshim_mac: "{{ '52:54:00' | community.general.random_mac(seed=inventory_hostname) }}"
  when: rshim_mac == "random"

- name: Compute DPU's rshim mac
  set_fact:
    dpu_rshim_mac: "{{ rshim_mac }}"
  when: rshim_mac != "random"

- name: Build bf.cfg for with Firmware Update workflow
  template:
    src: bf-fw.j2
    dest: /tmp/bf.cfg
    mode: 0755
  when:
    - bffwupdate is defined
    - bffwupdate|bool == True

- name: Build bf.cfg for HBN with SFC from the template
  template:
    src: bf-sfc.j2
    dest: /tmp/bf.cfg
    mode: 0755
  when:
    - sfcenabled is defined
    - sfcenabled|bool == True

- name: Build bf.cfg file from the template
  template:
    src: bf.j2
    dest: /tmp/bf.cfg
    mode: 0755
  when:
    - sfcenabled is not defined
    - bffwupdate is not defined

- name: "Read bf.cfg"
  shell: |
    cat /tmp/bf.cfg
  register: bf_cfg_content

- debug:
    msg: "{{ bf_cfg_content }}"
