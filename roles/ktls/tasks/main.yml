###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

### A bit of housekeeping/prereqs/misc items

# Disable tcp selective ack
- name: Disable selective ack in sysctl
  sysctl:
    name: net.ipv4.tcp_sack
    value: '0'
    sysctl_set: yes

- name: check for build dependencies
  apt:
    pkg:
    - make
    - gcc
    - g++
    - unzip
    state: present

- name: install latest dependencies for nginx
  apt:
    pkg:
    - libpcre3
    - libpcre3-dev
    - zlib1g
    - zlib1g-dev
    state: present

### TODO: openssl3.0 is planned to be shipping with ubuntu 22.04
### ubuntu 22.04 based BFB planned for June 2022 release
### Getting setup to be able to check versions to skip an openssl install from source

# Checking openssl version
- name: Get installed openssl version
  command: openssl version
  ignore_errors: True
  changed_when: false
  failed_when: false
  register: openssl_installed_version

# Need to force openssl install anyway as nginx and iperf_ssl need to be built from
# openssl 3.0 and expects it to be in /tmp
- name: Force an install if currently installed version is less than desired version
  set_fact:
    openssl_reinstall_from_source: true
  when: '(openssl_installed_version is success and (openssl_installed_version.stdout | regex_replace("^.*?([0-9\.]+).*$", "\\1") is version_compare(openssl_version, operator="<")))'  # noqa 204
  # [204] Lines should be no longer than 160 chars
  # I'm afraid to try and make this multi-line

- when: openssl_installed_version is failed or openssl_reinstall_from_source
  block:
    - name: Checking if openssl 3.0 source has been downloaded
      stat:
        path: "/tmp/{{ openssl_file }}"
      register: openssl_download

    - name: Download openssl 3.0 source from Internet
      get_url:
        url: "{{ openssl_source_url }}"
        dest: "/tmp"
#        checksum: "sha256:{{ openssl_sha256sum_url }}"
      when: not openssl_download.stat.exists

    - name: Extract archive
      unarchive:
        src: "/tmp/{{ openssl_file }}"
        dest: /tmp/
        copy: false

    - name: Configure install for x86
      command: ./Configure linux-x86_64 enable-ktls threads
      args:
        chdir: "/tmp/openssl-{{ openssl_version }}"
      when: ansible_architecture == "x86_64"

    - name: Configure install for ARM
      command: ./Configure linux-aarch64 enable-ktls threads
      args:
        chdir: "/tmp/openssl-{{ openssl_version }}"
      when: ansible_architecture == "aarch64"

    - name: Build openssl
      command: make -j {{ ansible_processor_cores }}
      args:
        chdir: "/tmp/openssl-{{ openssl_version }}"

    - name: Install openssl  # noqa 305
      become: true
      shell: make -j {{ ansible_processor_cores }} install
      args:
        chdir: "/tmp/openssl-{{ openssl_version }}"
      # [305] Use shell only when shell functionality is required
      # make module is too slow. -j argument is required.

    - name: move libssl.so.3 file into path
      copy:
        remote_src: yes
        src: "/tmp/openssl-{{ openssl_version }}/libssl.so.3"
        dest: "/usr/lib"

    - name: move libcrypto.so.3 file into path
      copy:
        remote_src: yes
        src: "/tmp/openssl-{{ openssl_version }}/libcrypto.so.3"
        dest: "/usr/lib"

### Install iperf_ssl

- when: install_iperf_ssl
  block:
    - name: Clone iperf SSL directory
      git:
        repo: https://github.com/Mellanox/iperf_ssl
        dest: /tmp/iperf_ssl
        version: "b450afb64795ecbb94cd9e2bb80927de7c881440"

    - name: Configure install
      command: env LD_LIBRARY_PATH=/tmp/openssl-{{ openssl_version }}/ ./configure LIBS="-L/tmp/openssl-{{ openssl_version }} -lssl -lcrypto -ldl -lrt"
      environment:
        LD_LIBRARY_PATH: '/tmp/openssl-{{ openssl_version }}/'
      args:
        chdir: /tmp/iperf_ssl

    - name: Build iperf ssl
      command: make -j {{ ansible_processor_cores }}
      args:
        chdir: /tmp/iperf_ssl

    - name: Move certreq file
      copy:
        remote_src: yes
        src: "/tmp/iperf_ssl/newreq.pem"
        dest: "/tmp/iperf_ssl/src/"

    - name: Move keyfile
      copy:
        remote_src: yes
        src: "/tmp/iperf_ssl/key.pem"
        dest: "/tmp/iperf_ssl/src/"

### Build wrk
# this is a client side test tool to test against nginx
- when: install_wrk
  block:
    - name: Clone wrk repo
      git:
        repo: https://github.com/wg/wrk.git
        dest: /tmp/wrk
        version: "4.2.0"

    - name: Build wrk
      command: make -j {{ ansible_processor_cores }}
      args:
        chdir: /tmp/wrk

### Build nginx
- when: install_nginx
  block:
    - name: Clone nginx repo
      git:
        repo: https://github.com/nginx/nginx.git
        dest: /tmp/nginx
        version: "release-1.21.5"

    - name: configure install
      command: >-  # noqa 503
        ./auto/configure
        --with-openssl=/tmp/openssl-{{ openssl_version }}
        --with-debug --with-http_ssl_module
        --with-openssl-opt="enable-ktls -DOPENSSL_LINUX_TLS -g3"
      args:
        chdir: /tmp/nginx

    - name: Build nginx
      command: make -j {{ ansible_processor_cores }}
      args:
        chdir: /tmp/nginx

    - name: install nginx
      command: make -j {{ ansible_processor_cores }} install
      args:
        chdir: /tmp/nginx

    - name: drop in nginx.conf
      copy:
        src: nginx.conf
        dest: /usr/local/nginx/conf/nginx.conf
        owner: root
        group: root
        mode: 0644

    - name: install nginx systemd service file
      copy:
        src: nginx.service
        dest: /lib/systemd/system/nginx.service
        owner: root
        group: root
        mode: 0644

    - name: systemd daemon-reload
      systemd:
        daemon-reload: true

## generate RSA keys and certs and move them to the path nginx needs
- name: render config file for generating certificate (x509 attrs)
  template:
    src: certificate.cnf.j2
    dest: /tmp/certificate.cnf

- name: Check if key already exist
  stat:
    path: /tmp/key.pem
  register: key_pem

- name: Check if cert already exists
  stat:
    path: /tmp/cert.pem
  register: cert_pem

- name: generate certificates for nginx  # noqa 503
  command: >-
    ./openssl-{{ openssl_version }}/apps/openssl
    req -x509 -config certificate.cnf
    -nodes -keyout key.pem
    -out cert.pem -sha256 -days 365
  args:
    chdir: /tmp
  register: generate_certs
  when: key_pem.changed or cert_pem.changed
  # [503] Tasks that run when changed should likely be handlers
  # turning this into a handler would require a handler flush here and that may impact other tasks/roles

- name: Copy  keys to nginx certificate path  # noqa 503
  copy:
    remote_src: yes
    src: "/tmp/key.pem"
    dest: "/usr/local/nginx/conf/"
  when: generate_certs.changed
  # [503] Tasks that run when changed should likely be handlers
  # turning this into a handler would require a handler flush here and that may impact other tasks/roles

- name: Copy certificate to nginx certificate path  # noqa 503
  copy:
    remote_src: yes
    src: "/tmp/cert.pem"
    dest: "/usr/local/nginx/conf/"
  when: generate_certs.changed
  # [503] Tasks that run when changed should likely be handlers
  # turning this into a handler would require a handler flush here and that may impact other tasks/roles

### Enable ktls offloads with ethtool

- name: set_fact | find BF2 interfaces
  set_fact:
    bf2_interfaces: "{{ bf2_interfaces|default([]) + [hostvars[inventory_hostname]['ansible_' + item]['device']] }}"
  when:
    - hostvars[inventory_hostname]['ansible_' + item].module is defined
    - hostvars[inventory_hostname]['ansible_' + item].module == "mlx5_core"
    - hostvars[inventory_hostname]['ansible_' + item].device is match ("enp")
  with_items: "{{ ansible_interfaces }}"

- name: Ensure tls offload is enabled for rx
  command: ethtool -K {{ item }} tls-hw-rx-offload on
  with_items: "{{ bf2_interfaces }}"
  when: bf2_interfaces is defined

- name: Ensure tls offload is enabled for tx
  command: ethtool -K {{ item }} tls-hw-tx-offload on
  with_items: "{{ bf2_interfaces }}"
  when: bf2_interfaces is defined

# drop a 1GB file in for nginx to download
- name: Create 1gb file for nginx to serve
  command:
    cmd: dd if=/dev/zero of=testfile bs=1 count=0 seek=1G
    creates: /tmp/nginx/docs/html/testfile
  args:
    chdir: /tmp/nginx/docs/html/

# drop a 4MB file in for nginx to download
- name: Create 4MB file for nginx to serve (for wrk test)
  command:
    cmd: dd if=/dev/zero of=testfile-4mb bs=1 count=0 seek=4M
    creates: /tmp/nginx/docs/html/testfile-4mb
  args:
    chdir: /tmp/nginx/docs/html/

# ensure nginx is restarted
- name: (re)start nginx
  systemd:
    name: nginx.service
    state: restarted
