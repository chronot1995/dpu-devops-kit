#!/usr/bin/python3

import json
import os
import subprocess

bmc_info = {}

# set bmc_enabled

if os.path.exists("/dev/ipmi0"):
    bmc_info["bmc_enabled"] = True
else:
    bmc_info["bmc_enabled"] = False


##### Get BMC Network information

# example output

#root@localhost:/home/ubuntu# ipmitool lan print 1
#Set in Progress         : Set Complete
#Auth Type Support       : 
#Auth Type Enable        : Callback : 
#                        : User     : 
#                        : Operator : 
#                        : Admin    : 
#                        : OEM      : 
#IP Address Source       : DHCP Address        <- want
#IP Address              : 192.168.1.117       <- want
#Subnet Mask             : 255.255.255.0       <- want
#MAC Address             : 10:70:fd:90:0d:10   <- want
#Default Gateway IP      : 192.168.1.254       <- want
#Default Gateway MAC     : 00:00:00:00:00:00   <- want
#802.1q VLAN ID          : Disabled            <- want
#RMCP+ Cipher Suites     : 17
#Cipher Suite Priv Max   : aaaaaaaaaaaaaaa
#                        :     X=Cipher Suite Unused
#                        :     c=CALLBACK
#                        :     u=USER
#                        :     o=OPERATOR
#                        :     a=ADMIN
#                        :     O=OEM
#Bad Password Threshold  : Not Available

# Only if BMC is enabled, get ipmitool command output, format it, and split into list of lines
if bmc_info["bmc_enabled"]:
    ipmitool_lines = subprocess.run(["ipmitool","lan","print","1"], capture_output=True).stdout.decode('UTF-8').splitlines()

    ### todo some sanity checking here ^^

    # only care about lines 7 to 13 with IP address, mask, etc
    for i in range(7, 14):
        # split the line by that middle colon, and make it a nicely formatted json variable
        bmc_info[ipmitool_lines[i].split(": ")[0].strip().lower().replace(" ", "_")] = ipmitool_lines[i].split(": ")[1].strip().lower().replace(" ", "_")

#root@localhost:/home/ubuntu# ipmitool fru
#FRU Device Description : Builtin FRU Device (ID 0)
# Device not present (Requested sensor, data, or record not found)
#
#FRU Device Description : Nvidia-BMCMezz (ID 169)
# Board Mfg Date        : Wed Apr 13 03:24:00 2022
# Board Mfg             : Nvidia
# Board Product         : Nvidia-BMCMezz    <- want
# Board Serial          : MT2213X34149      <- want
# Board Part Number     : MBF2H516C-CECOT   <- want


# Only if BMC is enabled, get ipmitool command output, format it, and split into list of lines
if bmc_info["bmc_enabled"]:
    ipmitool_lines = subprocess.run(["ipmitool","fru"], capture_output=True).stdout.decode('UTF-8').splitlines()

    ### todo some sanity checking here ^^
    # only care about lines 7 and 8, serial and part number
    for i in range(7, 9):
        # split the line by that middle colon, and make it a nicely formatted json variable
        bmc_info[ipmitool_lines[i].split(": ")[0].strip().lower().replace(" ", "_")] = ipmitool_lines[i].split(": ")[1].strip().lower().replace(" ", "_")



# print the dict as json to stdout for ansible
print(json.dumps(bmc_info))
