###############################################################################
#
# Copyright 2021 NVIDIA Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
###############################################################################

## Ask for interface to montior
# only support host representors on dpu (pf0hpf,pf1hpf,pf0vf1)
# and physical interfaces (p0 or p1)

- name: Ask for interface to mirror if not provided
  pause:
    prompt: Monitor which interface?
  register: monitor_interface_input
  when: monitor_interface is undefined

- name: Get monitor_interface from prompt
  set_fact:
    monitor_interface: "{{ monitor_interface_input['user_input'] }}"
  when: monitor_interface_input['user_input'] is defined

- name: Check the monitor_interface variable
  fail:
    msg: "The provided monitor_interface: {{ monitor_interface }} does not exist on the system. Check interfaces."
  when: hostvars[inventory_hostname]['ansible_' + monitor_interface].device is undefined

- name: set pfnum fact
  set_fact:
    pfnum: "{{ monitor_interface | regex_replace('^p.*([0-1]).*', '\\1') }}"

#### Call/import the create SF role here.

- name: Create a new trusted SF
  include_role:
    name: create_sf

# This dict: aux_interfaces_dict gets set as a fact from the role above
# There should only be one element [0] because this only creates one SF
- name: find SF aux device index number
  set_fact:
    aux_device_num: "{{ (aux_interfaces_dict|dict2items)[0].key | regex_replace('^mlx5_core.sf.(.*)$', '\\1') }}"
  when: aux_interfaces_dict is defined

# Sanity check
- name: Check vars
  fail: 
    msg: "we do not have an aux_device_num variable set. It should be the aux device index 2,3,4,5 etc."   
  when: aux_device_num is undefined

# Tries to use the built in representor (sfnum 0) 
# Ensures the representor is in same OVS bridge as mirrored interface 
#
- name: Finding ovs bridge
  command: ovs-vsctl port-to-br {{ monitor_interface }}
  register: port_to_br_output

#
# This is what we need to mirror packets to and what goes in the ovs bridge
- name: set representor name
  set_fact:
    representor_name: "en3f{{ pfnum }}pf{{ pfnum }}sf{{ sf_num }}"

- name: Remove default representor (SF0) from ovs
  command: ovs-vsctl del-port "en3f{{ pfnum }}pf{{ pfnum }}sf0"
  failed_when: false
  ignore_errors: true
  changed_when: false

- name: Removing representor from ovs
  command: ovs-vsctl del-port {{ representor_name }}
  failed_when: false
  ignore_errors: true
  changed_when: false

- name: Add rep(force) to same bridge as mirrored port
  command: ovs-vsctl add-port {{ port_to_br_output.stdout }} {{ representor_name }}

## Setup ovs port mirror for mirrored port

- name: Setup ovs mirroring
  command: |
    ovs-vsctl -- --id=@p1 get port {{ monitor_interface }} \
    -- --id=@p2 get port {{ representor_name }} \
    -- --id=@m create mirror name=m0 select-dst-port=@p2 select-src-port=@p2 output-port=@p1 \
    -- set bridge {{ port_to_br_output.stdout }} mirrors=@m
  failed_when: false
  ignore_errors: true
  changed_when: false

## Work on the container yaml file for kubelet
- name: Check if resources are already downloaded
  command: ngc registry resource info {{ container_resources_path }}
  register: container_config_info
  changed_when: false

- name: check version
  set_fact:
    container_resources_version: "{{ (container_config_info.stdout|from_json).latestVersionIdStr }}"

- name: Pull container resources files
  command:
    cmd: ngc registry resource download-version {{ container_resources_path }}
    creates: /tmp/doca_container_configs_v{{ container_resources_version }}
    chdir: /tmp
  register: container_config_download

- name: looking at aux_device_num
  debug:
    var: aux_device_num

- name: Update SF_NUM_1 (mirrored port) in container config
  replace:
    path: "/tmp/doca_container_configs_v{{ container_resources_version }}/configs/latest/doca_flow_inspector.yaml"  # noqa 204
    regexp: 'SF_NUM_1\n.*value: \".*\"\n'
    replace: 'SF_NUM_1\n        value: "{{ aux_device_num }}"\n'
  # [204] Lines should be no longer than 160 chars

# optional
- name: Update SERVICE_ARGS to log at highest level
  replace:
    path: "/tmp/doca_container_configs_v{{ container_resources_version }}/configs/latest/doca_flow_inspector.yaml"
    regexp: 'SERVICE_ARGS\n.*value: \".*\"\n'
    replace: 'SERVICE_ARGS\n        value: "--policy /flow_inspector/flow_inspector_cfg.json -l 4"\n'
  when: debug_level_log is true

# create directory
- name: Create flow_inspector directory in /tmp
  file:
    path: /tmp/flow_inspector
    state: directory

# create directory
- name: Create flow_inspector directory in /opt/mellanox/doca/services/flow_inspector/bin/
  file:
    path: /opt/mellanox/doca/services/flow_inspector/bin/
    state: directory

# drop in config file (from files folder in role)
- name: Copy in the flow inspector config file
  copy:
    src: flow_inspector_cfg.json
    dest: /tmp/flow_inspector/flow_inspector_cfg.json

# drop in config file (from files folder in role)
- name: Copy in the flow inspector config file
  copy:
    src: flow_inspector_cfg.json
    dest: /opt/mellanox/doca/services/flow_inspector/bin/flow_inspector_cfg.json

# enable hugepages
- name: Enable 2048k hugepages
  shell: echo 2048 > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages

- name: create directory
  file:
    path: /mnt/huge
    state: directory

- name: mount
  command: mount -t hugetlbfs nodev /mnt/huge
  failed_when: false
  ignore_errors: true
  changed_when: false

# copy yaml file to kublet
- name: Copy yaml file to kubelet.d
  command: cp "/tmp/doca_container_configs_v{{ container_resources_version }}/configs/latest/doca_flow_inspector.yaml" /etc/kubelet.d/doca_flow_inspector.yaml  # noqa 204
  changed_when: false
  # [204] Lines should be no longer than 160 chars

# When we enable hugepages, kubelet doesn't seem to be aware of those resources until we restart the service
# If we don't force a restart, you will get 'fail to admit pod' for the flow inspector mentioning
#
# bf2 kubelet[4622]: I0503 19:32:07.429089    4622 predicate.go:115] "Failed to admit pod, unexpected error while attempting to recover from admission failure" pod="default/doca-flow-inspector-bf2" err="preemption: error finding a set of pods to preempt: no set of running pods found to reclaim resources: [(res: hugepages-2Mi, q: 1073741824), ]"

- name: Ensure kubelet is restarted
  systemd:
    name: kubelet
    state: restarted
