#!/bin/bash
#
# This file is generated by an ansible template
#
# A systemd service runs this script AFTER kubelet starts
# We need the DOCA Telemetry service to start first and get situated
# Then we can start the flow inspector service. That means we have to manually fiddle with the yaml files for kubelet
# 
#

# Rename the podspec file so that kubelet tears down the pod. 
# The flow inspector container wont work anyway when launched: we still need to create the SF that the podspec references
mv /etc/kubelet.d/doca_flow_inspector.yaml /etc/kubelet.d/doca_flow_inspector.suspended

# do the hugepage stuff quick
echo "2048" > /sys/kernel/mm/hugepages/hugepages-2048kB/nr_hugepages
mkdir /mnt/huge
mount -t hugetlbfs nodev /mnt/huge

# add/create the SF
SF_INDEX=`/opt/mellanox/iproute2/sbin/mlxdevm port add pci/{{ pci_id }} flavour pcisf pfnum {{ pfnum }} sfnum {{ sf_num }} | grep sfnum | cut -d":" -f3 | cut -d'/' -f2`

# configure the SF
/opt/mellanox/iproute2/sbin/mlxdevm port function set pci/{{ pci_id }}/$SF_INDEX hw_addr {{ sf_mac_address }} trust on state active


## This bit of code finds the aux_device: mlx5_core.sf.4 
# given the sf_num and the pci device: on dpu, pci device will always be either: 0000:03:00.0 or 0000:03:00.1 
#
#
# set convenience vars
device="{{ pci_id }}"
sfnum="{{ sf_num }}"

# loop through the aux devices
for aux_dev in `ls /sys/bus/auxiliary/devices`
do
  # we only care about the mlx5_core.sf
  if [[ "$aux_dev" =~ "mlx5_core.sf" ]]; then
    # read in the SF number of the aux device
    working_sfnum=`cat /sys/bus/auxiliary/devices/$aux_dev/sfnum`

    # if we dont have the right sfnum, skip, continue loop
    if [ "$sfnum" != "$working_sfnum" ]; then
      continue
    fi

    # if SF is correct, need to confirm correct PCI device 0000:03:00.0 or 0000:03:00.1
    # lookup the parent device by looking at where this symlink points to /sys/bus/auxiliary/devices/$aux_dev
    working_device=`ls -l /sys/bus/auxiliary/devices/$aux_dev | cut -d ">" -f2 | awk 'BEGIN { FS = "/" } ; { print $(NF - 1) }'`

    # If we got the wrong PCI device, skip and continue loop
    if [ "$device" != "$working_device" ]; then
      continue
    fi
    # Here we must have the right aux device, so we can break out of the loop keeping aux_dev as the right one
    # echo "$aux_dev"
    break
  # if not a mlx5_core.sf device, skip and continue the loop
  else 
    continue
  fi
done

## Deploy the SF's now that we know the aux_device name :)
#
# Unbind from config driver and bind to real packet processing driver
echo "$aux_dev" > /sys/bus/auxiliary/drivers/mlx5_core.sf_cfg/unbind
sleep 1
echo "$aux_dev" > /sys/bus/auxiliary/drivers/mlx5_core.sf/bind

# Store the aux dev index
# The yaml file references this aux device but only by the integer on the end: mlx5_core.sf.4 <- so 4
aux_dev_index=`echo $aux_dev | cut -d'.' -f3`

# update the yaml file with this aux index number of the SF
sed -i -z "s/name: SF_NUM_1\n.*value: \".\"\n/name: SF_NUM_1\n        value: \"${aux_dev_index}\"\n/g" /etc/kubelet.d/doca_flow_inspector.suspended

# provide a bit more time for kubelet to clean up and kill the old pod/container
sleep 20

# now re-enable the pod
mv /etc/kubelet.d/doca_flow_inspector.suspended /etc/kubelet.d/doca_flow_inspector.yaml
